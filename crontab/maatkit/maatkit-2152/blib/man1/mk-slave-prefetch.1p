.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MK-SLAVE-PREFETCH 1p"
.TH MK-SLAVE-PREFETCH 1p "2008-08-12" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
mk\-slave\-prefetch \- Pipeline relay logs on a MySQL slave to pre\-warm caches.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& mk\-slave\-prefetch
\& mk\-slave\-prefetch \-\-statistics > /path/to/saved/statistics
\& mk\-slave\-prefetch /path/to/saved/statistics
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
mk-slave-prefetch reads the slave's relay log slightly ahead of where the
slave's \s-1SQL\s0 thread is reading, converts statements into \f(CW\*(C`SELECT\*(C'\fR, and
executes them.  In theory, this should help alleviate the effects of the
slave's single-threaded \s-1SQL\s0 execution.  It will help take advantage of
multiple CPUs and disks by pre-reading the data from disk, so the data is
already in the cache when the slave \s-1SQL\s0 thread executes the un-modified
version of the statement.
.PP
Statements that can't be converted into \f(CW\*(C`SELECT\*(C'\fR are ignored.  However, there
is always a chance of bugs.  It would be a very good idea to connect as a
read-only user.  Here is an example of how to grant the necessary privileges:
.PP
.Vb 2
\&   GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.*
\&   TO 'prefetch'@'%' IDENTIFIED BY 'sp33dmeup!';
.Ve
.PP
\&\f(CW\*(C`mk\-slave\-prefetch\*(C'\fR learns how long it takes statements to execute, and doesn't
try to execute those that take a very long time.  You can ask it to print what
it has learned after it executes.  You can also specify a filename on the
command line.  The file should contain the statistics printed by a previous
run.  These will be used to pre-populate the statistics so it doesn't have to
re\-learn.
.PP
This program is based on concepts I heard Paul Tuckfield explain at the November
2006 MySQL Camp un\-conference.  However, the code is my own work.  I have not
seen any other implementation of Paul's idea.
.SH "DOES IT WORK?"
.IX Header "DOES IT WORK?"
Does it work?  Does it actually speed up the slave?
.PP
That depends on your workload, hardware, and other factors.  It might work when
the following are true:
.IP "\(bu" 4
The slave's data is much larger than memory, and the workload is mostly randomly
scattered small (single\-row is ideal) changes.
.IP "\(bu" 4
There are lots of high-concurrency \f(CW\*(C`UPDATE\*(C'\fR and \f(CW\*(C`DELETE\*(C'\fR statements on the
master.
.IP "\(bu" 4
The slave \s-1SQL\s0 thread is I/O\-bound, but the slave overall has plenty of spare I/O
capacity (definitely more than one disk spindle).
.IP "\(bu" 4
The slave uses InnoDB or another storage engine with row-level locking.
.PP
It does \fBnot\fR speed up replication on my slaves, which mostly have large
queries like \f(CW\*(C`INSERT .. SELECT .. GROUP BY\*(C'\fR.  In my benchmarks it seemed to
make no difference at all, positive or negative.
.PP
On the wrong workload or slave configuration, this technique might actually make
the slaves slower.  Your mileage will vary.
.PP
User-contributed benchmarks are welcome.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
You can download Maatkit from Google Code at
<http://code.google.com/p/maatkit/>, or you can get any of the tools
easily with a command like the following:
.PP
.Vb 3
\&   wget http://www.maatkit.org/get/toolname
\&   or
\&   wget http://www.maatkit.org/trunk/toolname
.Ve
.PP
Where \f(CW\*(C`toolname\*(C'\fR can be replaced with the name (or fragment of a name) of any
of the Maatkit tools.  Once downloaded, they're ready to run; no installation is
needed.  The first \s-1URL\s0 gets the latest released version of the tool, and the
second gets the latest trunk code from Subversion.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\-\-print and \-\-daemonize are mutually exclusive.
.PP
Specify at least one of \-\-print or \-\-execute.
.IP "\-\-askpass" 4
.IX Item "--askpass"
Prompt for a password when connecting to MySQL.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.
.Sp
Enables character set settings in Perl and MySQL.  If the value is \f(CW\*(C`utf8\*(C'\fR, sets
Perl's binmode on \s-1STDOUT\s0 to utf8, passes the \f(CW\*(C`mysql_enable_utf8\*(C'\fR option to
DBD::mysql, and runs \f(CW\*(C`SET NAMES UTF8\*(C'\fR after connecting to MySQL.  Any other
value sets binmode on \s-1STDOUT\s0 without the utf8 layer, and runs \f(CW\*(C`SET NAMES\*(C'\fR after
connecting to MySQL.
.IP "\-\-checkint" 4
.IX Item "--checkint"
short form: \-i; type: Array; default: 16,1,1024
.Sp
How often to check the slave: init,min,max.
.Sp
How many relay log events should pass before checking the output of \f(CW\*(C`SHOW
SLAVE STATUS\*(C'\fR.  The syntax is a three-number range: initial, minimum, and
maximum.  You should be able to leave this at the defaults.
.Sp
\&\f(CW\*(C`mk\-slave\-prefetch\*(C'\fR varies the check interval in powers of two, depending on
whether it decides the check was necessary.
.IP "\-\-daemonize" 4
.IX Item "--daemonize"
Fork and run in the background; \s-1POSIX\s0 OSes only.
.IP "\-\-database" 4
.IX Item "--database"
short form: \-D; type: string
.Sp
The database to use for the connection.
.Sp
Connect to this database.  \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR will issue \f(CW\*(C`USE\*(C'\fR statements
as required by the binary log events.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-errors" 4
.IX Item "--errors"
culumative: yes; default: 0; type: int
.Sp
Print queries that caused errors.  If specified once, at exit; if twice, in
realtime.
.Sp
If you specify this option once, you will see a report at the end of the script
execution, showing the normalized queries and the number of times they were
seen.  If you specify this option twice, you will see the errors printed out as
they occur, but no normalized report at the end of execution.
.IP "\-\-execute" 4
.IX Item "--execute"
short form: \-x; negatable: yes; default: yes
.Sp
Execute the transformed queries to warm the caches.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Host to connect to.
.IP "\-\-iolag" 4
.IX Item "--iolag"
short form: \-l; type: size; default: 1k
.Sp
How many bytes to lag the slave I/O thread.
.Sp
This helps avoid \f(CW\*(C`mysqlbinlog\*(C'\fR reading right off the end of the relay log file.
.IP "\-\-maxquerytime" 4
.IX Item "--maxquerytime"
short form: \-q; type: float; default: 1
.Sp
Do not run queries longer than this many seconds; fractions allowed.
.Sp
If \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR predicts the query will take longer to execute, it will
skip the query.  This is based on the theory that pre-warming the cache is most
beneficial for short queries.
.Sp
\&\f(CW\*(C`mk\-slave\-prefetch\*(C'\fR learns how long queries require to execute.  It keeps an
average over the last \*(L"\-\-querysampsize\*(R" samples of each query.  The averages
are based on an abstracted version of the query, with specific parameters
replaced by placeholders.  The result is a sort of \*(L"fingerprint\*(R" for the query,
not executable \s-1SQL\s0.  You can see the learned statistics with the
\&\*(L"\-\-statistics\*(R" option.
.Sp
You can pre-load query fingerprints, and average execution times, from a file.
This way you don't have to wait for \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR to learn all over
every time you start it.  Just specify the file on the command line.  The
format should be the same as the output from \*(L"\-\-statistics\*(R".
.Sp
You might also want to filter out some statements completely, or let only some
statements through.  See the \*(L"\-\-rejectregexp\*(R" and \*(L"\-\-permitregexp\*(R"
options.
.Sp
If \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR hasn't seen a query's fingerprint before, and thus
doesn't know how long it will take to execute, it wraps it in a subuery, like
this:
.Sp
.Vb 1
\&   SELECT 1 FROM ( <query> ) AS X LIMIT 1;
.Ve
.Sp
This helps avoid fetching a lot of data back to the client when a query is
very large.  It requires a version of MySQL that supports subqueries (version
4.1 and newer).  If yours doesn't, the subquery trick can't be used, so the
query might fetch a lot of data back to the client.
.Sp
Once a query's fingerprint has been seen, so it's known that the query isn't
enormously slow, \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR just rewrites the \f(CW\*(C`SELECT\*(C'\fR list for
efficiency.  (Avoiding the subquery reduces the query's overhead for short
queries).  The rewritten query will then look like the following;
.Sp
.Vb 1
\&   SELECT ISNULL(COALESCE(<columns>)) FROM ...
.Ve
.IP "\-\-numprefix" 4
.IX Item "--numprefix"
Abstract away numeric table name prefixes.
.Sp
This causes the following two queries to \*(L"fingeprint\*(R" to the same thing:
.Sp
.Vb 2
\&  select from 1_2_users;
\&  select from 2_3_users;
.Ve
.IP "\-\-offset" 4
.IX Item "--offset"
short form: \-o; type: size; default: 128
.Sp
How many bytes \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR will try to stay in front of the slave
\&\s-1SQL\s0 thread.
.Sp
It will not execute log events it doesn't think are at least this
far ahead of the \s-1SQL\s0 thread.  See also \*(L"\-\-window\*(R".
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
The password to use when connecting.
.IP "\-\-permitregexp" 4
.IX Item "--permitregexp"
type: string
.Sp
Permit queries matching this Perl regexp.
.Sp
This is a filter for log events.  The regular expression is matched against the
raw log event, before any transformations are applied.  If specified, this
option will permit only log events matching the regular expression.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-print" 4
.IX Item "--print"
Print the transformed relay log events to standard output.
.IP "\-\-printnonrewritten" 4
.IX Item "--printnonrewritten"
Print queries that could not be transformed into \f(CW\*(C`SELECT\*(C'\fR.
.IP "\-\-progress" 4
.IX Item "--progress"
type: int
.Sp
Print progress information every X events.
.Sp
The information is the current log file and position, plus a summary of the
statistics gathered.
.IP "\-\-querysampsize" 4
.IX Item "--querysampsize"
type: int; default: 4
.Sp
Average query exec time over this many queries.
.Sp
The last \f(CW\*(C`N\*(C'\fR queries with a given fingerprint are averaged together to get the
average query execution time (see \*(L"\-\-maxquerytime\*(R").  
.IP "\-\-rejectregexp" 4
.IX Item "--rejectregexp"
type: string
.Sp
Reject queries matching this Perl regexp.
.Sp
Similar to \*(L"\-\-permitregexp\*(R", but has the opposite effect: log events must
\&\fBnot\fR match the regular expression.
.IP "\-\-sentinel" 4
.IX Item "--sentinel"
type: string; default: /tmp/mk\-slave\-prefetch\-sentinel
.Sp
Exit if this file exists.
.IP "\-\-setvars" 4
.IX Item "--setvars"
type: string; default: wait_timeout=10000
.Sp
Set these MySQL variables.
.Sp
Specify any variables you want to be set immediately after connecting to MySQL.
These will be included in a \f(CW\*(C`SET\*(C'\fR command.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-statistics" 4
.IX Item "--statistics"
Print execution statistics after exiting.
.Sp
The statistics are in two sections: counters, and queries.  The counters simply
count the number of times events occur.  You may see the following counters:
.Sp
.Vb 33
\&   NAME                    MEANING
\&   ======================  =======================================
\&   mysqlbinlog             Executed mysqlbinlog to read log events.
\&   events                  The total number of relay log events.
\&   not_far_enough_ahead    An event was not at least \-\-offset
\&                           bytes ahead of the SQL thread.
\&   too_far_ahead           An event was more than \-\-offset
\&                           + \-\-window bytes ahead of the SQL thread.
\&   too_close_to_io_thread  An event was less than \-\-iolag bytes
\&                           away from the I/O thread's position.
\&   event_not_allowed       An event wasn't a SET, USE, INSERT,
\&                           UPDATE, DELETE or REPLACE query.
\&   event_filtered_out      An event was filtered out because of
\&                           \-\-permitregexp or \-\-rejectregexp.
\&   same_timestamp          A SET TIMESTAMP event was ignored because
\&                           it had the same timestamp as the last one.
\&   do_query                A transformed event was executed
\&                           or printed.
\&   query_error             An executed query had an error.
\&   query_too_long          An event was not executed because its
\&                           average query length exceeded
\&                           \-\-maxquerytime.
\&   query_not_rewritten     A query could not be rewritten to a
\&                           SELECT.
\&   master_pos_wait         The tool waited for the SQL thread to
\&                           catch up.
\&   show_slave_status       The tool queried SHOW SLAVE STATUS.
\&   load_data_infile        The tool found a LOAD DATA INFILE query
\&                           and unlinked (deleted) the temp file.
\&   could_not_unlink        The tool failed to unlink a temp file.
\&   sleep                   The tool slept for a second because the 
\&                           slave's SQL thread was not running, or
\&                           because it read past the end of the log.
.Ve
.Sp
After the counters, \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR prints information about each query
fingerprint it has seen, two lines per fingerprint.  The first line contains
the query's fingerprint.  The second line contains the number of times the
fingerprint was seen, number of times executed, the sum of the execution
times, and the average execution time over the last \*(L"\-\-querysampsize\*(R"
samples.
.IP "\-\-stop" 4
.IX Item "--stop"
Stop running instances by creating the \*(L"\-\-sentinel\*(R" file.
.IP "\-\-time" 4
.IX Item "--time"
short form: \-t; type: time
.Sp
How long \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR should run before exiting.
.Sp
The default is to run forever.
.IP "\-\-tmpdir" 4
.IX Item "--tmpdir"
type: string; default: /dev/null
.Sp
Where to create temp files for \f(CW\*(C`LOAD DATA INFILE\*(C'\fR queries.
.Sp
The default will cause \f(CW\*(C`mysqlbinlog\*(C'\fR to skip the file and the associated \f(CW\*(C`LOAD
DATA INFILE\*(C'\fR command entirely.
.Sp
If \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR sees a \f(CW\*(C`LOAD DATA INFILE\*(C'\fR command (which it won't, if
this is left at the default), it will try to remove the temporary file, then
skip the event.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-window" 4
.IX Item "--window"
short form: \-w; type: size; default: 4k
.Sp
The max bytes ahead of the slave \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR should get.
.Sp
Defines the window within which \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR considers a query \s-1OK\s0 to
execute.  The window begins at the slave \s-1SQL\s0 thread's last known position plus
\&\*(L"\-\-offset\*(R" bytes, and extends for the specified number of bytes.
.Sp
If \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR sees a log event that is too far in the future, it will
increment the \f(CW\*(C`too_far_ahead\*(C'\fR counter and wait for the slave \s-1SQL\s0 thread to
catch up (which increments the \f(CW\*(C`master_pos_wait\*(C'\fR counter).  If an event isn't
far enough ahead of the \s-1SQL\s0 thread, it will be discarded and the
\&\f(CW\*(C`not_far_enough_ahead\*(C'\fR counter increments.
.Sp
Watching the mentioned statistics can help you understand how to tune the
window.  You want \f(CW\*(C`mk\-slave\-prefetch\*(C'\fR to run just ahead of the \s-1SQL\s0 thread, not
throwing out a lot of events for being too far ahead or not far enough ahead.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI\s0, DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`MKDEBUG\*(C'\fR enables verbose debugging output in all of
the Maatkit tools:
.PP
.Vb 1
\&   MKDEBUG=1 mk\-....
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please use Google Code Issues and Groups to report bugs or request support:
<http://code.google.com/p/maatkit/>.
.PP
Please include the complete command-line used to reproduce the problem you are
seeing, the version of all MySQL servers involved, the complete output of the
tool when run with \*(L"\-\-version\*(R", and if possible, debugging output produced by
running with the \f(CW\*(C`MKDEBUG=1\*(C'\fR environment variable.
.SH "COPYRIGHT, LICENSE AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE AND WARRANTY"
This program is copyright (c) 2007 Baron Schwartz.
Feedback and improvements are welcome.
.PP
\&\s-1THIS\s0 \s-1PROGRAM\s0 \s-1IS\s0 \s-1PROVIDED\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1WITHOUT\s0 \s-1LIMITATION\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTIBILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Baron Schwartz.
.SH "VERSION"
.IX Header "VERSION"
This manual page documents Ver 1.0.3 Distrib 2152 \f(CW$Revision:\fR 2117 $.
